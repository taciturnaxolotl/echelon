---
import '../styles/base.css';
import Base from '../components/Base.astro';

import { Image } from 'astro:assets';
import logo from '../assets/echelon.png';

import { createSession, getSession, gracePeriod } from "../utils/auth/auth";
import type { Session } from "../utils/auth/auth";

let session: Session | null = null;
const sessionCookie = Astro.cookies.get("session")?.value;
if (sessionCookie !== undefined) {
	session = getSession(sessionCookie);
}

let errorMsg: string | null = Astro.url.searchParams.get("error");

if (
	Astro.request.method === "GET" &&
	Astro.url.searchParams.get("code") !== null &&
	!session
) {
	try {
		const code = Astro.url.searchParams.get("code");
		if (!code) {
			throw new Error("No code provided");
		}

		const jwtToken = await createSession(code, Astro.url.origin);

		if (!jwtToken) {
			throw new Error("Failed to create session");
		}

		// reload the page to remove the code from the URL but keep state
		return new Response(null, {
			status: 303,
			headers: {
			location: `${Astro.url.pathname}?checkSession=true`,
				"Set-Cookie": `session=${jwtToken.token}; Path=/; HttpOnly; Secure; SameSite=Strict; Expires=${new Date(jwtToken.expires + gracePeriod).toUTCString()}`
			},
		});
	} catch (error) {
		if (error instanceof Error) {
			console.error(error);
			errorMsg = error.message;
		}
	}
}

console.log(session);

interface SlackResponse {
		ok: boolean;
		channels?: Array<{
				id: string;
				name: string;
				is_channel: boolean;
				is_group: boolean;
				is_im: boolean;
				created: number;
				creator: string;
				is_archived: boolean;
				is_general: boolean;
				unlinked: number;
				name_normalized: string;
				is_shared: boolean;
				is_ext_shared: boolean;
				is_org_shared: boolean;
				pending_shared: unknown[];
				is_pending_ext_shared: boolean;
				is_member: boolean;
				is_private: boolean;
				is_mpim: boolean;
				updated: number;
				topic: {
						value: string;
						creator: string;
						last_set: number;
				};
				purpose: {
						value: string;
						creator: string;
						last_set: number;
				};
				previous_names: string[];
				num_members: number;
		}>;
		response_metadata?: {
				next_cursor?: string;
		};
}

const bluesky = Astro.url.searchParams.get("bluesky");
---

<Base>
	<Image src={logo} alt="Shrugging shoulders with a volley ball as the head." />

	<h2>Erlo!</h2>

	   {
		errorMsg && (
			<p class="text-red-500 mt-10">Error: {errorMsg}</p>
		)
		}

		{
			(session && !bluesky) && (
			<p>Slack Data</p>
			<div id="channel-stats" data-token={session?.token} class="flex justify-center">
				<table class="mt-8">
					<thead>
						<tr>
							<th class="px-4 py-2">Channel Type</th>
							<th class="px-4 py-2">Count</th>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td class="px-4 py-2">Public Channels</td>
							<td class="px-4 py-2" id="public-count">0</td>
						</tr>
						<tr>
							<td class="px-4 py-2">Private Channels</td>
							<td class="px-4 py-2" id="private-count">0</td>
						</tr>
						<tr>
							<td class="px-4 py-2">Direct Messages</td>
							<td class="px-4 py-2" id="dm-count">0</td>
						</tr>
						<tr>
							<td class="px-4 py-2">Group Messages</td>
							<td class="px-4 py-2" id="group-count">0</td>
						</tr>
					</tbody>
				</table>

					<script is:inline>
						const stats = document.getElementById('channel-stats');
						const token = stats?.dataset.token;

                        let channels = {
                          public: [],
                          private: [],
                          dm: [],
                          group: []
                        };

						function updateDisplay() {
							const publicEl = document.getElementById('public-count');
							const privateEl = document.getElementById('private-count');
							const dmEl = document.getElementById('dm-count');
							const groupEl = document.getElementById('group-count');

							if (publicEl) publicEl.textContent = channels.public.length.toString();
							if (privateEl) privateEl.textContent = channels.private.length.toString();
							if (dmEl) dmEl.textContent = channels.dm.length.toString();
							if (groupEl) groupEl.textContent = channels.group.length.toString();
						}

						if (token) {
							(async () => {
									let cursor = "";

									do {
											const response = await fetch(`/api/channels${cursor ? "?cursor=" + cursor : ""}`, {
													headers: {
															Authorization: `Bearer ${token}`,
													},
											});

											if (response.status === 429) {
															const retryAfter = response.headers.get('Retry-After');
															if (retryAfter) {
																			await new Promise(resolve => setTimeout(resolve, parseInt(retryAfter) * 1000));
																			continue;
															}
											}

											const result = await response.json();

											if (!result.ok) {
													throw new Error(result.error);
											}

											if (result.channels) {
													for (const channel of result.channels) {
															if (channel.is_channel && !channel.is_private) channels.public.push(channel);
															else if ((channel.is_channel || channel.is_group) && channel.is_private && !channel.is_mpim) channels.private.push(channel);
															else if (channel.is_im) channels.dm.push(channel);
															else if (channel.is_mpim || (!channel.is_channel && channel.is_private)) channels.group.push(channel);
													}
											}
											cursor = result.response_metadata?.next_cursor;
											console.log(cursor);

											updateDisplay();
									} while (cursor);
							})();
						}
					</script>
				</div>
			)
		}

	{
	   !session && Astro.url.searchParams.get("checkSession") && !bluesky && (
			<p>Press the button below for data</p>
    		<a href="/" class="border-solid border-2 rounded-md border-accent w-fit p-2 self-center mt-8">How many channels do I have?</a>
		)
	}

	{
	   bluesky && (
				<p>Bluesky Data</p>
				<div id="streaks-section" data-username={bluesky} class="flex justify-center">
					<table class="mt-8">
						<thead>
							<tr>
								<th class="px-4 py-2">Streak Type</th>
								<th class="px-4 py-2">Days</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td class="px-4 py-2">Current Streak</td>
								<td class="px-4 py-2" id="current-streak">Loading...</td>
							</tr>
							<tr>
								<td class="px-4 py-2">Longest Streak</td>
								<td class="px-4 py-2" id="longest-streak">Loading...</td>
							</tr>
							<tr>
								<td class="px-4 py-2">Same?</td>
								<td class="px-4 py-2" id="is-same">Loading...</td>
							</tr>
							<tr>
								<td class="px-4 py-2">Most Posts in a Day</td>
								<td class="px-4 py-2" id="most-posts">Loading...</td>
							</tr>
						</tbody>
					</table>

					<script is:inline>
						const streakSection = document.getElementById('streaks-section');
						const username = streakSection?.dataset.username;

						console.log(username);

						if (username) {
							(async () => {
								const response = await fetch(`/api/bluesky-posts?username=${username}`);
								const data = await response.json();

								if (!response.ok) {
									throw new Error("Failed to fetch data");
								}

								let currentStreak = 0;
								let longestStreak = 0;
								let currentDate = new Date();
								currentDate.setHours(0,0,0,0);

								// Get all posts grouped by date
								const postsByDate = data.posts.reduce((acc, post) => {
									const date = new Date(post.post.indexedAt);
									date.setHours(0,0,0,0);
									const dateStr = date.getTime().toString();
									if (!acc[dateStr]) {
										acc[dateStr] = [];
									}
									acc[dateStr].push(post);
									return acc;
								}, {});

								// Find most posts in a day
								const mostPosts = Math.max(...Object.values(postsByDate).map(posts => posts.length));

								// Get unique dates only
								const postDates = Object.keys(postsByDate)
									.map(timestamp => new Date(parseInt(timestamp)))
									.sort((a, b) => b.getTime() - a.getTime());

								let streakStart = 0;
								let lastDate = postDates[0];

								for (let i = 1; i < postDates.length; i++) {
									const dayDiff = Math.floor((lastDate.getTime() - postDates[i].getTime()) / (1000 * 60 * 60 * 24));

									if (dayDiff > 1) {
										const streakLength = i - streakStart;
										if (streakLength > longestStreak) {
											longestStreak = streakLength;
										}
										if (streakStart === 0) {
											currentStreak = streakLength;
										}
										streakStart = i;
									}
									lastDate = postDates[i];
								}

								// Handle the last streak
								const finalStreakLength = postDates.length - streakStart;
								if (finalStreakLength > longestStreak) {
									longestStreak = finalStreakLength;
								}
								if (streakStart === 0) {
									currentStreak = finalStreakLength;
								}

								const currentStreakEl = document.getElementById('current-streak');
								const longestStreakEl = document.getElementById('longest-streak');
								const isSameEl = document.getElementById('is-same');
								const mostPostsEl = document.getElementById('most-posts');

								if (currentStreakEl) currentStreakEl.textContent = currentStreak.toString();
								if (longestStreakEl) longestStreakEl.textContent = longestStreak.toString();
								if (isSameEl) isSameEl.textContent = (currentStreak === longestStreak ? "Yes" : "No");
								if (mostPostsEl) mostPostsEl.textContent = mostPosts.toString();
							})();
						}
					</script>
				</div>
				<a href={`/`} class="border-solid border-2 rounded-md border-accent p-2 mt-4">Switch back to Slack Data</a>
		)
	}

	<div class="flex flex-col items-center mt-4">
		<input type="text" id="bluesky-username" placeholder="Enter Bluesky username" class="p-2 border rounded-md mb-2" />
		<a href="#" id="submit-bluesky" onclick="window.location.href='?' + new URLSearchParams({bluesky: document.getElementById('bluesky-username').value})" class="border-solid border-2 rounded-md border-accent p-2">Submit Bluesky Username</a>
	</div>

	<span class="mb-10" />

	{
		!session && !Astro.url.searchParams.get("checkSession") && (
    		<p>Press the button below for data</p>
    		<a href=`https://slack.com/oauth/v2/authorize?scope=&amp;user_scope=channels%3Aread%2Cgroups%3Aread%2Cim%3Aread%2Cmpim%3Aread%2Cteam%3Aread%2Cusers%3Aread&redirect_uri=${Astro.url.origin}&client_id=${import.meta.env.SLACK_CLIENT_ID}` class="border-solid border-2 rounded-md border-accent w-fit p-2 self-center mt-8">Sign in with Slack</a>
    		)
	}
</Base>
